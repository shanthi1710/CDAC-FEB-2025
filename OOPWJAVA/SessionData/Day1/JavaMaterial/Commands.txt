javac Hello.java
java Hello

//-d option specifies  where to put generated classes
javac -d ../bin Hello.java

when the class is in different packages
javac -cp "<Path where generated classes are kept>" -d ../bin ArithmaticTest.java
javac -classpath "<Path where generated classes are kept>" -d ../bin ArithmaticTest.java

//Run with Fully qualified name
java com.cdac.acts.Hello

//Set classpath from command path
//Make sure it not include in ""
SET CLASSPATH=.;<Path where generated classes are kept>
SET CLASSPATH=.;D:\Technical\Java\JavaClass\JavaCode\basics\bin

//To print current classpath
echo %CLASSPATH%

ClassNotFoundException occurs when you try to load a class at runtime using Class.forName() or loadClass() methods and requested classes are not found in classpath. Most of the time this exception will occur when you try to run an application without updating the classpath with JAR files. This exception is a checked Exception derived from java.lang.Exception class and you need to provide explicit handling for it. This exception also occurs when you have two class loaders and if a ClassLoader tries to access a class that is loaded by another classloader in Java. You must be wondering that what actually is classloader in Java. Java ClassLoader is a part of the Java Runtime Environment that dynamically loads Java classes in JVM(Java Virtual Machine). The Java Runtime System does not need to know about files and files systems because of classloaders. 

NoClassDefFoundError

Now dwelling on the next exception that is NoClassDefFoundError occurs when the class was present during compile time and the program was compiled and linked successfully but the class was not present during runtime. It is an error that is derived from LinkageError. Linkage error occurs when a class has some dependencies on another class and the latter class changes after compilation of the former class. NoClassFoundError is the result of implicit loading of class because of calling a method or accessing a variable from that class. This error is more difficult to debug and find the reason why this error occurred. So in this case you should always check the classes which are dependent on this class. In order to illustrate let us first make any two classes for a java program and link them. 


ClassNotFoundException Vs NoClassDefFoundError

As the name suggests, ClassNotFoundException is an exception while NoClassDefFoundError is an error.
ClassNotFoundException occurs when classpath does not get updated with required JAR files while error occurs when the required class definition is not present at runtime.